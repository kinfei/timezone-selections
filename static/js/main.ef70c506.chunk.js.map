{"version":3,"sources":["App.js","utils.js","serviceWorker.js","index.js"],"names":["App","Option","Select","timezones","arr","names","moment","name","indexOf","startsWith","data","value","displayName","format","push","sort","a","b","afc","charAt","bfc","forEach","getTimezonesNames","className","showSearch","style","width","placeholder","optionFilterProp","filterOption","input","option","children","toLowerCase","map","x","i","key","renderOptions","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uNA8CeA,MA5Bf,WAAe,IAGLC,EAAWC,IAAXD,OAEFE,ECrBD,WACL,IADkC,EAC5BC,EAAM,GAENC,EAAQC,KAAUD,QAHU,cAKfA,GALe,IAKlC,2BAA0B,CAAC,IAAhBE,EAAe,QACxB,KAAKA,EAAKC,QAAQ,KAAO,GAAc,QAATD,GAAmBA,EAAKE,WAAW,SAAjE,CAIA,IAAMC,EAAO,CACXC,MAAOJ,EACPK,YAAaN,KAAUC,GAAMM,OAAO,MAGtCT,EAAIU,KAAKJ,KAfuB,8BAyClC,OAvBAN,EAAIW,MAAK,SAACC,EAAGC,GACX,GAAID,EAAEJ,cAAgBK,EAAEL,YACtB,MAAgB,QAAZI,EAAEL,OAAyB,EAExBK,EAAEL,QAAUM,EAAEN,MAAQ,EAAIK,EAAEL,MAAQM,EAAEN,MAAQ,GAAK,EAG5D,IAAMO,EAAMF,EAAEJ,YAAYO,OAAO,GAE3BC,EAAMH,EAAEL,YAAYO,OAAO,GAEjC,MAAY,MAARD,EACU,MAARE,GAEGJ,EAAEJ,YAAcK,EAAEL,aAFA,EAEmB,EAGlC,MAARQ,GACGJ,EAAEJ,YAAcK,EAAEL,YADD,GACoB,KAG9CR,EAAIiB,SAAQ,SAACL,GAAD,OAAQA,EAAEJ,YAAF,eAAwBI,EAAEJ,YAA1B,aAA0CI,EAAEL,UAEzDP,EDpBWkB,GAElB,OAAKnB,EAGH,yBAAKoB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,CACEC,YAAU,EACVC,MAAO,CAAEC,MAAO,KAChBC,YAAY,uBACZC,iBAAiB,WACjBC,aAAc,SAACC,EAAOC,GAAR,OACZA,EAAOC,SAASC,cAAczB,QAAQsB,EAAMG,gBAAkB,IA5B1E,SAAuBhC,EAAQE,GAC7B,OAAO+B,cAAI/B,GAAW,SAACgC,EAAGC,GACxB,OACE,kBAACnC,EAAD,CAAQoC,IAAKF,EAAExB,MAAOA,MAAOwB,EAAExB,OAC5BwB,EAAEvB,gBA2BA0B,CAAcrC,EAAQE,MAdR,+BEbLoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ef70c506.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Select } from \"antd\";\r\nimport { map } from \"lodash\";\r\n\r\nimport { getTimezonesNames } from \"./utils\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction renderOptions(Option, timezones) {\r\n  return map(timezones, (x, i) => {\r\n    return (\r\n      <Option key={x.value} value={x.value}>\r\n        {x.displayName}\r\n      </Option>\r\n    );\r\n  });\r\n}\r\n\r\nfunction App() {\r\n  //  console.log({ getTimezonesNames: getTimezonesNames(\"en-gb\") });\r\n\r\n  const { Option } = Select;\r\n\r\n  const timezones = getTimezonesNames();\r\n\r\n  if (!timezones) return <div />;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Select\r\n          showSearch\r\n          style={{ width: 400 }}\r\n          placeholder=\"Select your timezone\"\r\n          optionFilterProp=\"children\"\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n        >\r\n          {renderOptions(Option, timezones)}\r\n        </Select>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import * as moment from \"moment-timezone\";\r\n\r\nexport function getTimezonesNames() {\r\n  const arr = [];\r\n\r\n  const names = moment.tz.names();\r\n\r\n  for (const name of names) {\r\n    if ((name.indexOf(\"/\") < 0 && name !== \"UTC\") || name.startsWith(\"Etc/\")) {\r\n      continue;\r\n    }\r\n\r\n    const data = {\r\n      value: name,\r\n      displayName: moment.tz(name).format(\"Z\"),\r\n    };\r\n\r\n    arr.push(data);\r\n  }\r\n\r\n  arr.sort((a, b) => {\r\n    if (a.displayName === b.displayName) {\r\n      if (a.value === \"UTC\") return -1;\r\n\r\n      return a.value === b.value ? 0 : a.value > b.value ? 1 : -1;\r\n    }\r\n\r\n    const afc = a.displayName.charAt(0);\r\n\r\n    const bfc = b.displayName.charAt(0);\r\n\r\n    if (afc === \"-\") {\r\n      if (bfc === \"+\") return -1;\r\n\r\n      return a.displayName > b.displayName ? -1 : 1;\r\n    }\r\n\r\n    if (bfc === \"-\") return 1;\r\n    return a.displayName > b.displayName ? 1 : -1;\r\n  });\r\n\r\n  arr.forEach((a) => (a.displayName = `(GMT ${a.displayName}) ${a.value}`));\r\n\r\n  return arr;\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}